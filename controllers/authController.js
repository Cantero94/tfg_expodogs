import { Exposicion } from "../models/Exposicion.js";
import { Usuario } from "../models/Usuario.js";

import bcrypt from "bcrypt";
import moment from "moment";
import nodemailer from "nodemailer";
import crypto from "crypto";
import { Op } from "sequelize";
import dotenv from "dotenv";
dotenv.config();

// P√°gina de inicio
const paginaInicio = async (req, res) => {
  try {
    //const exposiciones = await Exposicion.findAll({ order: [["fecha", "DESC"]] });

    // Obtener solo exposiciones pr√≥ximas para carrusell
    const hoy = moment(res.locals.hoy).format("YYYY-MM-DD");
    const exposiciones = await Exposicion.findAll({
      where: {
        fecha: { [Op.gt]: hoy }, // Operador de Sequelize mayor que, gt=GreateThan
      },
      order: [["fecha", "ASC"]],
    });

    // Mandamos los errores y mensajes a la vista guardados en la sesi√≥n
    const errores = req.session.errores || [];
    const mensaje = req.session.mensaje || "";
    req.session.errores = [];
    req.session.mensaje = "";

    res.render("paginaInicio", {
      pagina: "Inicio",
      exposiciones,
      usuario: req.session.usuario || null,
      mensaje,
      errores,
      moment,
    });
  } catch (error) {
    console.log(error);
    res.status(500).send("BCK: Error con el servidor.");
  }
};

const registrarUsuario = async (req, res) => {
  try {
    const {
      nombre,
      apellidos,
      dni,
      email,
      password,
      password2,
      telefono1,
      telefono2,
      direccion,
      cp,
      ciudad,
      provincia,
      pais,
    } = req.body;

    // Validar todos los datos antes de procesar
    const errorValidacion = validarDatosRegistro({
      nombre,
      apellidos,
      dni,
      email,
      password,
      password2,
      telefono1,
      telefono2,
      direccion,
      cp,
      ciudad,
      provincia,
      pais,
    });

    if (errorValidacion) {
      // Error 400 cuando se recibe una solicitud mal formada.
      // Mandamos en formato json el objeto error con errorValidacion como valor.
      // Si hay varios errores se manda solo el primero, aunque se podr√≠a haber mandado un array, he decidido hacerlo as√≠ para prevenir malas intenciones al que ha deshabilitado las validaciones en el cliente.
      return res.status(400).json({ error: errorValidacion });
    }

    // Verificar si el usuario ya existe, despues de validar los datos
    const usuarioExistente = await Usuario.findOne({ where: { email } });
    if (usuarioExistente) {
      console.log("‚ùå Error: El correo ya est√° registrado.");
      // Error 400 cuando se recibe una solicitud mal formada.
      // Mandamos en formato json para que el modal error pueda leerlo.
      return res
        .status(400)
        .json({
          error:
            "BCK: El correo ya est√° registrado. Si no recuerda su contrase√±a puede recuperarla haciendo click en '¬øOlvidaste tu contrase√±a?'",
        });
    }

    // Hashear la contrase√±a
    const hashedPassword = await bcrypt.hash(password, 10);

    // Generamos un nuevo token de verificaci√≥n, de momento no verifico que exista por que la posibilidad de que se repita es practicamente 0, pero en un futuro se podr√≠a hacer.
    const tokenVerificacion = crypto.randomBytes(32).toString("hex");

    // Crear usuario en la base de datos
    await Usuario.create({
      nombre,
      apellidos,
      dni,
      email,
      password: hashedPassword,
      telefono1,
      telefono2,
      direccion,
      cp,
      ciudad,
      provincia,
      pais,
      activo: false,
      baneado: false,
      token_verificacion: tokenVerificacion,
    });

    // Enviar correo de confirmaci√≥n con el token de forma as√≠ncrona
    await enviarCorreoConfirmacion(email, nombre, tokenVerificacion);

    console.log("‚úÖ Usuario registrado correctamente.");
    res
      .status(200) // 200 OK para cuando comprobamos con if (response.ok) en cliente
      .json({ mensaje: "Hemos enviado un correo electr√≥nico con un enlace para activar tu cuenta. Por favor, revisa tu bandeja de entrada. Si no lo ha recibido, comprueba la bandeja de spam." });
  } catch (error) {
    console.error("‚ùå Error en registrarUsuario:", error);
    return res
      .status(500)
      .json({ error: "BCK: Error en el servidor. Int√©ntalo nuevamente." });
  }
};

// Funci√≥n para validar todos los datos
const validarDatosRegistro = (datos) => {
  const {
    nombre,
    apellidos,
    dni,
    email,
    password,
    password2,
    telefono1,
    telefono2,
    direccion,
    cp,
    ciudad,
    provincia,
    pais,
  } = datos;

  // üîπ Validar campos obligatorios del formulario
  const camposObligatorios = {
    nombre,
    apellidos,
    dni,
    email,
    password,
    password2,
    telefono1,
    direccion,
    cp,
    ciudad,
    provincia,
    pais,
  };
  // Recorremos el objeto camposObligatorios convirtiendo cada propiedad en un array de arrays con dos elementos, el nombre de la propiedad y el valor de la propiedad mediante el m√©todo Object.entries().
  for (const [campo, valor] of Object.entries(camposObligatorios)) {
    if (!valor || valor.trim() === "") {
      // Como dec√≠a antes, si hay varios errores se manda solo el primero que encuentra cortando con return.
      return `BCK: El campo ${campo.toUpperCase()} es obligatorio.`;
    }
  }

  // üîπ Validar contrase√±as
  if (password !== password2) {
    return "BCK: Las contrase√±as no coinciden.";
  }
  if (password.length < 6) {
    return "BCK: La contrase√±a debe tener al menos 6 caracteres.";
  }

  // üîπ Validar tel√©fono
  // Expresi√≥n regular para tel√©fonos
  const telefonoRegex = /^\+?\d{1,4}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{3,5}[-.\s]?\d{3,5}$/;
  // Utilizamos el m√©todo test() de las expresiones regulares que comprueba si el tel√©fono1 cumple con la expresi√≥n regular.
  if (!telefonoRegex.test(telefono1)) { 
    return "BCK: El n√∫mero de Tel√©fono 1 no es v√°lido.";
  }
  // Tel√©fono2 es opcional, por lo que si existe hay que comprobarlo.
  if (telefono2 && !telefonoRegex.test(telefono2)) {
    return "BCK: El n√∫mero de Tel√©fono 2 no es v√°lido.";
  }

  // üîπ Validar DNI/NIE/Pasaporte
  // Creamos varias expresiones regulares para DNI, NIE y pasaporte.
  const dniRegex = /^\d{8}[A-Z]$/; // DNI Espa√±ol
  const nieRegex = /^[XYZ]\d{7}[A-Z]$/; // NIE Espa√±ol
  const extranjeroRegex = /^[A-Z0-9]{6,20}$/i; // Pasaporte o ID extranjero
  const letraFinal = dni.slice(-1);
  const letrasValidas = "TRWAGMYFPDXBNJZSQVHLCKE";

  // Si es un DNI, validar la letra
  if (dniRegex.test(dni)) {
    const numero = dni.slice(0, -1);
    const letraCalculada = letrasValidas[numero % 23];
    
    if (letraFinal !== letraCalculada) {
      return "BCK: La letra del DNI no es v√°lida.";
    }
    // Si es un NIE, convertir la letra inicial y validar
  } else if (nieRegex.test(dni)) {
    let numero = dni.slice(1, -1);
    const letraInicial = dni[0];

    if (letraInicial === "X") numero = "0" + numero;
    if (letraInicial === "Y") numero = "1" + numero;
    if (letraInicial === "Z") numero = "2" + numero;

    const letraCalculada = letrasValidas[parseInt(numero) % 23];

    if (letraFinal !== letraCalculada) {
      return "BCK: La letra del NIE no es v√°lida.";
    }
  } else if (!extranjeroRegex.test(dni)) {
    // Si no es ni DNI, ni NIE, ni pasaporte v√°lido, mostrar error
    return "BCK: El DNI/NIE/Pasaporte no es v√°lido.";
  }

  return null; // Si todo est√° bien, no hay errores
};

// Funci√≥n para enviar correo de confirmaci√≥n
const enviarCorreoConfirmacion = async (email, nombre, tokenVerificacion) => {
  try {
    const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || "localhost",
        port: parseInt(process.env.SMTP_PORT, 10) || 587,      // 587 para STARTTLS
        secure: false,                                         // no SMTPS; usaremos STARTTLS
        requireTLS: true,                                      // exigir cifrado
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
        tls: {
          // En entornos Plesk internos, a veces el certificado no es de una CA p√∫blica.
          // Con esto evitamos que nodemailer rechace la conexi√≥n por "self-signed".
          rejectUnauthorized: false
        }
    });

    const mailOptions = {
      from: `"Expodogs" <info@canterodev.es>`,
      to: email,
      subject: "Confirma tu cuenta en Expodogs",

      html: `
            <div style="font-family: Arial, sans-serif; width:50%; margin:0 auto;">
            <div style="background-color: #212529; padding: 20px; border-radius: 10px; text-align: center;">
            <img src="http://expodogs.es/media/img/logo.png" alt="Expodogs Logo" style="width: 50%;">
            </div>
            <h1 style="text-align: center;">Hola, ${nombre}</h1>
            <div style="padding: 0px 20px; text-align: center;">
            <p style="text-align: left;">Gracias por registrarte en Expodogs. Para activar tu cuenta, haz clic en el siguiente enlace:</p>
            <a href="https://expodogs.canterodev.es/verificar-cuenta?token=${tokenVerificacion}" 
            style="display: inline-block; background-color: #212529; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Activar mi cuenta
            </a>
            </div>
            </div>
            `,
      //üîπ Cambiar la URL de producci√≥n en el enlace
      // <a href="https://tfg-expodogs.onrender.com/verificar-cuenta?token=${tokenVerificacion}"
      // <a href="http://localhost:4000/verificar-cuenta?token=${tokenVerificacion}"
    };

    await transporter.sendMail(mailOptions);
    console.log("üìß Correo de confirmaci√≥n enviado a:", email);
  } catch (error) {
    console.error("‚ùå Error enviando el correo:", error);
  }
};

// Funci√≥n para verificar la cuenta con el enlace del correo
const verificarCuenta = async (req, res) => {
  try {
    const { token } = req.query;

    // Buscar al usuario con el token
    const usuario = await Usuario.findOne({
      where: { token_verificacion: token },
    });

    if (!usuario) {
      // Almacenamos el error en la sesi√≥n para mostrarlo con el modal errorModal.
      req.session.errores = ["Enlace inv√°lido o cuenta ya activada."];
      console.log("‚ùå Error guardado en sesi√≥n:", req.session.errores);
      
      // Guardar sesi√≥n antes de redirigir
      req.session.save(() => {
        return res.redirect("/");
      });
      return;
    }

    // Activamos la cuenta y eliminamos el token en la base de datos
    await Usuario.update(
      { activo: true, token_verificacion: null },
      { where: { id_usuario: usuario.id_usuario } }
    );
    // Almacenamos los datos del usuario en la sesi√≥n para que pueda iniciar sesi√≥n autom√°ticamente.
    req.session.usuario = {
      id: usuario.id_usuario,
      nombre: usuario.nombre,
      email: usuario.email,
    };
    // Almacenamos el mensaje en la sesi√≥n para mostrarlo con el modal mensajeModal.
    req.session.mensaje = "Su cuenta ha sido activada correctamente. ¬°Bienvenido!";
    
    return res.redirect("/");
  } catch (error) {
    console.error(error);
    res.status(500).send("Error en el servidor.");
  }
};


// Funci√≥n para iniciar sesi√≥n
const loginUsuario = async (req, res) => {
  try {
    const { email, password, remember } = req.body;
    // Aqu√≠ si almacenamos los errores para mandarlos todos de una tacada.
    let errores = [];
    // üîπComprobamos que los campos no est√©n vac√≠os.
    if (!email || !password) {
      errores.push("Correo y contrase√±a son obligatorios.");
    } else {
      const usuario = await Usuario.findOne({ where: { email } });
      // üîπComprobamos que el usuario existe, que est√° activo y que no est√° baneado.
      if (!usuario) {
        errores.push("El correo no est√° registrado.");
      } else if (!usuario.activo) {
        errores.push("Tu cuenta a√∫n no est√° activada. Revisa tu correo.");
      } else if (usuario.baneado) {
        errores.push("Tu cuenta ha sido bloqueada.");
      } else {
        // üîπComprobamos que la contrase√±a es correcta con el m√©todo compare de bcrypt que compara la contrase√±a introducida con la contrase√±a hasheada.
        const passwordMatch = await bcrypt.compare(password, usuario.password);
        if (!passwordMatch) {
          errores.push("Contrase√±a incorrecta.");
        } else {
          console.log("‚úÖ Usuario autenticado:", usuario.email);
          req.session.usuario = {
            id: usuario.id_usuario,
            nombre: usuario.nombre,
            email: usuario.email,
          };
          // üîê Guardamos la sesi√≥n en una cookie si el usuario ha hecho click en mantener sesi√≥n.
          if (remember === "on") {
            // 30 d√≠as
            req.session.cookie.maxAge = 1000 * 60 * 60 * 24 * 30;
          } else {
            // Solo sesi√≥n actual (se borra al cerrar navegador)
            req.session.cookie.expires = false;
          }
        }
      }
    }

    if (errores.length > 0) {
      return res.status(400).json({ errores });
    }

    console.log("üìå Sesi√≥n guardada:", req.session.usuario);
    return res.status(200).json({ mensaje: "Sesi√≥n iniciada correctamente." });
  } catch (error) {
    console.error("‚ùå Error en loginUsuario:", error);
    return res
      .status(500)
      .json({ errores: ["Error en el servidor. Int√©ntalo nuevamente."] });
  }
};

// Funci√≥n para cerrar sesi√≥n
const logoutUsuario = (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("‚ùå Error al cerrar sesi√≥n:", err);
      return res.status(500).json({ error: "Error en el servidor" });
    }
    res.redirect("/");
  });
};

// Funci√≥n para recordar la contrase√±a
const recordarPassUsuario = async (req, res) => {
  try {
    const { email } = req.body;
    const usuario = await Usuario.findOne({ where: { email } });

    if (!usuario) {
      return res.status(400).json({ errores: "Este correo no est√° registrado." });
    }

    const tokenVerificacion = crypto.randomBytes(32).toString("hex");
    
    await Usuario.update(
      { token_verificacion: tokenVerificacion },
      { where: { email } }
    );

    // Enviamos un correo con enlace para restablecer la contrase√±a
    await enviarCorreoRestablecer(email, usuario.nombre, tokenVerificacion);

    console.log(`üìß Enlace de recuperaci√≥n enviado a: ${email}`);
    return res
      .status(200)
      .json({ mensaje: "Se ha enviado un correo con instrucciones para restablecer tu contrase√±a. Revisa tu bandeja de entrada." });
  } catch (error) {
    console.error("‚ùå Error en recordarPassUsuario:", error);
    return res
      .status(500)
      .json({ error: "Error en el servidor. Int√©ntalo nuevamente." });
  }
};

// Funci√≥n para enviar correo de restablecimiento de contrase√±a
const enviarCorreoRestablecer = async (email, nombre, token) => {
  try {
    const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || "localhost",
        port: parseInt(process.env.SMTP_PORT, 10) || 587,      // 587 para STARTTLS
        secure: false,                                         // no SMTPS; usaremos STARTTLS
        requireTLS: true,                                      // exigir cifrado
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
        tls: {
          // En entornos Plesk internos, a veces el certificado no es de una CA p√∫blica.
          // Con esto evitamos que nodemailer rechace la conexi√≥n por "self-signed".
          rejectUnauthorized: false
        }
    });

    const mailOptions = {
      from: `"Expodogs" <info@canterodev.es>`,
      to: email,
      subject: "Restablecimiento de contrase√±a en Expodogs",
      html: `
            <div style="font-family: Arial, sans-serif; width:50%; margin:0 auto;">
            <div style="background-color: #212529; padding: 20px; border-radius: 10px; text-align: center;">
            <img src="http://expodogs.es/media/img/logo.png" alt="Expodogs Logo" style="width: 50%;">
            </div>
            <h1 style="text-align: center;">Hola, ${nombre}</h1>
            <div style="padding: 0px 20px; text-align: center;">
            <p style="text-align: left;">Hemos recibido una solicitud para restablecer tu contrase√±a. 
            Si no has solicitado esto, ignora este correo. Para continuar, haz clic en el siguiente enlace:</p>
            <a href="https://expodogs.canterodev.es/restablecer-password?token=${token}"
            style="display: inline-block; background-color: #212529; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
            Restablecer contrase√±a
            </a>
            </div>
            </div>
            `,
      //üîπ Cambiar la URL de producci√≥n en el enlace
      //<a href="https://tfg-expodogs.onrender.com/restablecer-password?token=${token}"
      //<a href="http://localhost:4000/restablecer-password?token=${token}"
    };

    await transporter.sendMail(mailOptions);
    console.log("üìß Correo de recuperaci√≥n enviado a:", email);
  } catch (error) {
    console.error("‚ùå Error enviando el correo de recuperaci√≥n:", error);
  }
};

// Funci√≥n para restablecer la contrase√±a con el enlace del correo de recuperaci√≥n
const restablecerPassword = async (req, res) => {
  try {
    const { token } = req.query;

    const usuario = await Usuario.findOne({
      where: { token_verificacion: token },
    });

    if (!usuario) {
      req.session.errores = ["Enlace inv√°lido o ya utilizado."];
      console.log("‚ùå Intento de uso de token inv√°lido");
      return req.session.save(() => res.redirect("/"));
    }

    // Restablecer la contrase√±a a 123456 y activar la cuenta si no estaba activada
    const hashedPassword = await bcrypt.hash("123456", 10);
    await Usuario.update(
      { password: hashedPassword, token_verificacion: null, activo: true },
      { where: { id_usuario: usuario.id_usuario } }
    );

    // Iniciar sesi√≥n autom√°ticamente
    req.session.usuario = {
      id: usuario.id_usuario,
      nombre: usuario.nombre,
      email: usuario.email,
    };
    // Guardamos el mensaje en sesi√≥n y redirigimos para que se muestre en la p√°gina de inicio con mensajeModal. Este es el mensaje que se muestra en √©l.
    req.session.mensaje = "Tu contrase√±a ha sido restablecida a '123456'. Te recomendamos cambiarla en el apartado Mi Cuenta.";
      
    return req.session.save(() => res.redirect("/")); 
  } catch (error) {
    console.error("‚ùå Error en restablecerPassword:", error);
    req.session.errores = ["Error en el servidor. Int√©ntalo nuevamente."];
    res.redirect("/");
  }
};

// Exportar funciones
export {
  paginaInicio,
  registrarUsuario,
  verificarCuenta,
  loginUsuario,
  logoutUsuario,
  recordarPassUsuario,
  restablecerPassword,
};
